{"version":3,"sources":["menu/DesktopMenu.js","page/Who.js","page/ContentsBanner.js","page/PageNumber.js","page/Dev.js","page/Contents.js","App.js","serviceWorker.js","index.js"],"names":["DesktopMenu","props","prevScrollpos","window","pageYOffset","onscroll","currentScrollPos","document","getElementById","style","top","id","className","to","React","Component","UrlCard","name","url","target","rel","href","LegacyStack","intro","stackCss","Who","alt","src","colCss","ContentsBanner","subject","description","PageNumber","state","pageNumber","this","path","totalPage","onClick","pageNumberList","i","push","key","setState","map","row","Dev","list","loadContentsList","page","fetch","listPath","then","response","json","responseJson","keyCount","forEach","data","sub","des","basicPath","length","location","search","pageParam","split","Number","MARKDOWN_CONVERTER","require","Converter","Contents","contests","text","responseText","contents","makeHtml","textAlign","dangerouslySetInnerHTML","__html","App","exact","render","component","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b73a748.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport './DesktopMenu.scss';\n\nexport default class DesktopMenu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let prevScrollpos = window.pageYOffset;\n        window.onscroll = function() {\n            let currentScrollPos = window.pageYOffset;\n            if (prevScrollpos > currentScrollPos) {\n                document.getElementById(\"desktop-menu\").style.top = \"0\";\n            } else {\n                document.getElementById(\"desktop-menu\").style.top = \"-50px\";\n            }\n            prevScrollpos = currentScrollPos;\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"desktop-menu\" className=\"desktop-menu\">\n                <Link to=\"/dev\">개발</Link>\n                <Link to=\"/etc\">끄적끄적</Link>\n                <Link to=\"/who\">K.Nero</Link>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Who.scss';\n\nconst UrlCard = ({name, url}) => <a className=\"url-card\" target=\"_blank\" rel=\"noopener noreferrer\" href={url}>{name}</a>;\n\nconst LegacyStack = ({name, intro, url, stackCss}) => (\n    <div className=\"row\">\n        <div className=\"col-sm-3\"/>\n        <div className=\"col-sm-6\">\n            <a className={stackCss} target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                <strong>{name}</strong>\n                <div>{intro}</div>\n            </a>\n        </div>\n        <div className=\"col-sm-3\"/>\n    </div>\n);\n\nexport default class Who extends React.Component {\n    render() {\n        return (\n            <div className=\"who\">\n                <div className=\"row\">\n                    <div className=\"col-sm-6\">\n                        <img alt=\"nero\" src=\"https://knero.github.io/knero-1.png\"/>\n                    </div>\n                    <div className=\"col-sm-6 my-info\">\n                        <div className=\"nickname\">K.Nero</div>\n                        <div>kwon-s-m@daum.net</div>\n                        <div className=\"intro\">\n                            #Java #C# #Backend #FullSt... #React_Native #React #Spring #Android #iOS #app_publishing\n                            #I_love_Network #AWS #SQL_a_little #CTO_Mask_maybe\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <UrlCard name=\"Linked in\" url=\"https://www.linkedin.com/in/seongminKwon\" colCss=\"col-sm-3\"/>\n                        <UrlCard name=\"github\" url=\"https://github.com/KNero?tab=repositories\" colCss=\"col-sm-3\"/>\n                        <UrlCard name=\"tistory\" url=\"https://jamcode.tistory.com\" colCss=\"col-sm-3\"/>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm-12 legacy-stack-text\">github repository</div>\n                </div>\n                <LegacyStack name=\"jwt-security\"\n                             intro=\"JWT 와 Role 을 통한 서비스 접근 제어\"\n                             url=\"https://github.com/KNero/jwt-security\"\n                             stackCss=\"legacy-stack-jwt\"/>\n                <LegacyStack name=\"ExOf\"\n                             intro=\"가벼운 프레임워크. 쉬운 사용 방법을 통한 빠른 서비스 호출\"\n                             url=\"https://knero.github.io/ExOf\"\n                             stackCss=\"legacy-stack-exof\"/>\n                <LegacyStack name=\"SQLite-Helper\"\n                             intro=\"SQLite Multi Thread And Single Connection Pool\"\n                             url=\"https://knero.github.io/SQLite-Helper/\"\n                             stackCss=\"legacy-stack-sqlite\"/>\n                <LegacyStack name=\"poi-relative-cell\"\n                             intro=\"Improved use to POI\"\n                             url=\"https://github.com/KNero/poi-relative-cell\"\n                             stackCss=\"legacy-stack-cell\"/>\n                <LegacyStack name=\"FileQueue\"\n                             intro=\"Serverless file queue\"\n                             url=\"https://github.com/KNero/FileQueue\"\n                             stackCss=\"legacy-stack-queue\"/>\n                <LegacyStack name=\"ETree\"\n                             intro=\"javascript tree component\"\n                             url=\"https://github.com/KNero/ETree\"\n                             stackCss=\"legacy-stack-etree\"/>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './ContentsBanner.scss';\n\nexport const ContentsBanner = ({subject, description, url}) => (\n    <div className=\"row\">\n        <div className=\"col-sm-2\"/>\n        <div className=\"col-sm-8 contents-banner\">\n            <Link to={\"/contents?path=\" + url}>\n                <div className=\"effect\">\n                    <div className=\"banner\">\n                        <div className=\"subject\">{subject}</div>\n                        <div className=\"description\">{description}</div>\n                    </div>\n                </div>\n            </Link>\n        </div>\n        <div className=\"col-sm-2\"/>\n    </div>\n);","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport \"./PageNumber.scss\";\n\nexport default class PageNumber extends React.Component {\n    state = {pageNumber: []};\n\n    componentDidMount() {\n        const {path, totalPage, onClick} = this.props;\n        let pageNumberList = [];\n\n        for (let i = 1; i <= totalPage; ++i) {\n            pageNumberList.push(\n                <Link key={\"page\" + i} to={path + \"?page=\" + i} onClick={() => onClick(i)}>\n                    <span className=\"page-number\">{i}</span>\n                </Link>\n            );\n        }\n\n        this.setState({pageNumber: pageNumberList});\n    }\n\n    render() {\n        return (\n            <div className=\"page-number-back\">\n                {this.state.pageNumber.map(row => row)}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Dev.scss';\nimport {ContentsBanner} from \"./ContentsBanner\";\nimport PageNumber from \"./PageNumber\";\n\nexport default class Dev extends React.Component {\n    state = {list: [], pageNumber: null};\n\n    componentDidMount() {\n        let page = 1;\n        if (this.props.location && this.props.location.search) {\n            const pageParam = this.props.location.search.split(\"?page=\");\n            if (pageParam.length === 2) {\n                page = Number(pageParam[1]);\n            }\n        }\n\n        this.loadContentsList(page);\n    }\n\n    loadContentsList = (page) => {\n        fetch(this.props.listPath)\n            .then(response => response.json())\n            .then(responseJson => {\n                let keyCount = 0;\n                let list = [];\n                responseJson[page - 1]\n                    .forEach(data => list.push(< ContentsBanner key={\"contents\" + keyCount++} subject={data.sub} description={data.des} url={data.path}/>));\n\n                this.setState({list: list, pageNumber: <PageNumber path={this.props.basicPath} totalPage={responseJson.length} onClick={this.loadContentsList}/>});\n            });\n    };\n\n    render() {\n        return (\n            <div className=\"dev\">\n                {this.state.list.map(row => row)}\n                {this.state.pageNumber}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Dev.scss';\n\nconst MARKDOWN = require('showdown');\nconst MARKDOWN_CONVERTER = new MARKDOWN.Converter();\n\nexport default class Contents extends React.Component {\n    state = {contests: \"\"};\n\n    componentDidMount() {\n        if (this.props.location.search) {\n            const path = this.props.location.search.split(\"?path=\");\n            if (path.length === 2) {\n                fetch(path[1])\n                    .then(response => response.text())\n                    .then(responseText => this.setState({contents: MARKDOWN_CONVERTER.makeHtml(responseText)}));\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div style={{textAlign: 'left'}} dangerouslySetInnerHTML={{__html: this.state.contents}}/>\n        );\n    }\n}","import React from 'react';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport DesktopMenu from './menu/DesktopMenu';\nimport Who from './page/Who';\nimport Dev from './page/Dev';\nimport Contents from \"./page/Contents\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <DesktopMenu/>\n                <div className=\"container\">\n                    <Route exact path=\"/\" render={() => <Dev basicPath=\"/dev\" listPath=\"/contents/dev-list.json\"/>}/>\n                    <Route path=\"/dev\" render={() => <Dev basicPath=\"/dev\" listPath=\"/contents/dev-list.json\"/>}/>\n                    <Route path=\"/etc\" render={() => <Dev basicPath=\"/etc\" listPath=\"/contents/etc-list.json\"/>}/>\n                    <Route path=\"/who\" component={Who}/>\n                    <Route path=\"/contents\" component={Contents}/>\n                </div>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}