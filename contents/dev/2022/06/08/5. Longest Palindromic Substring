문제자체는 아주 간단했다. 문자열안에서 Palindromic 인 부분 문자열을 찾는 것이다.

하지만 하루종일 생각을 해봐도 for 문에 for 문을 넣어서 모든 경우의 문자열을 찾아서 검사하는 코드만 떠올랐고 계속해서 시간초과가 발생했다.

실패한 코드중 마지막으로 작성한 코드.
```java
class Solution {
    public String longestPalindrome(String s) {
        HashSet<String> dup = new HashSet<>();
        int sl = s.length();
        
        for (int i = sl; i > 0; --i) {
            int max = sl - i;
            
            for (int j = 0; j < max + 1; ++j) {
                String check = s.substring(j, j + i);
                
                if (dup.contains(check)) {
                    continue;
                } else {
                    dup.add(check);
                }
                
                if (isPalindromic(check.toCharArray())) {
                    return check;
                }
            }
        }
        
        return "";
    }
    
    private boolean isPalindromic(char[] ca) {
        if (ca.length == 0) {
            return false;
        } else if (ca.length == 1) {
            return true;
        }
        
        int size = ca.length / 2;
        for (int i = 0; i < size; ++i) {
            if (ca[i] != ca[ca.length - 1 - i]) {
                return false;
            }
        }
        
        return true;
    }
}
```

Palindromic 검사를 위해서는 반복문은 필수였고 이 반복분을 제외하고 한번의 반복문으로 해결할 수 있는 방법이 떠오르지 않아 다른 사람의 코드를 좀 찾아봤다.

그리고 다른 사람의 코드를 보고 작성해본 코드.
```java
class Solution {
    public String longestPalindrome(String s) {
        int sl = s.length();
        if (sl == 0 || sl == 1) {
            return s;
        }
        
        int max = 0;
        int rl = 0;
        int rr = 0;
        
        for (int i = 1; i < sl; ++i) {
            // 짝수의 문자열 검사
            int l = i - 1;
            int r = i;
            
            while (l > -1 && r < sl && s.charAt(l) == s.charAt(r)) {
                --l;
                ++r;
            }
            
            int len = (r - 1) - (l + 1) + 1;
            if (max < len) {
                rl = l + 1;
                rr = r;
                max = len;
            }
            
            // 홀수의 문자열 검사
            l = i - 1;
            r = i + 1;
            
            while (l > -1 && r < sl && s.charAt(l) == s.charAt(r)) {
                --l;
                ++r;
            }
            
            len = (r - 1) - (l + 1) + 1;
            if (max < len) {
                rl = l + 1;
                rr = r;
                max = len;
            }
        }
        
        return s.substring(rl, rr);
    }
}
```
Palindromic 의 특성을 활용해서 한번의 for문 안에서 왼쪽과 오른쪽의 포인터를 사용하여 검사하는 while 문만 존재하도록 작성했다. 
